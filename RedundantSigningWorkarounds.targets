<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<!--

  This file contains a workaround to reduce the amount of redundant signing we perform as a result of MicroBuild signing during the build.
  
  When Project A attempts to build a dependent Project B, MSBuild will usually check to see if Project B has already been built and no-op the compile if it has.
  However, signing will still run on the outputs, which means we end up re-signing files that have already been signed.
  To avoid this, we can drop a temp file next to the signed output, which tells us the file has been signed. Then, we skip signing if the file already exists.

  Another approach would be to disable signing altogether unless CoreCompile runs, but that breaks additional workarounds used in projects that have this as a submodule, hence the temp file approach.

-->

  <PropertyGroup>
    <SigningCompleteFile>$(OutDir)\signing-completed.txt</SigningCompleteFile>
    
    <TargetsTriggeredByCompilation>
        $(TargetsTriggeredByCompilation);
        ClearSigningTempFileIfCompileRuns
    </TargetsTriggeredByCompilation>
  </PropertyGroup>

  <!--
    RemoveRedundantSigning and AddSignedIndicatorFile ensure we don't sign build output multiple times.
    Once signing is complete, we add a temp file. If the temp file is already present, we skip signing.
    -->
  <Target Name="RemoveRedundantSigning" BeforeTargets="SignFiles" Condition="Exists($(SigningCompleteFile))">
    <Message Text="Removing all FilesToSign, signing has already happened" Importance="High" />
    <ItemGroup>
      <FilesToSign Remove="@(FilesToSign)" />
    </ItemGroup>
  </Target>

  <Target Name="AddSignedIndicatorFile" AfterTargets="SignFiles">
      <WriteLinesToFile File="$(SigningCompleteFile)" Lines="@(FilesToSign)"/>
  </Target>

  <!--
    If CoreCompile runs, we need to clear the output dll signing file since the dll will get overwritten with an unsigned file.
    We do *not* need to clear the nuget signing files, though. Those dlls should not get overwritten.
  -->
  <Target Name="ClearSigningTempFileIfCompileRuns">
    <Message Text="Removing signing complete indicator file because CoreCompile ran..." />
    <Delete Files="$(SigningCompleteFile)" />
  </Target>
</Project>